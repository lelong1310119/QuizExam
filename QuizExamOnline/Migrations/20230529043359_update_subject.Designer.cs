// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizExamOnline.Models;

#nullable disable

namespace QuizExamOnline.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230529043359_update_subject")]
    partial class update_subject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizExamOnline.Models.AnswerQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRight")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AppAnswerQuestion", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.AppUserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserRole", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GradeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AppExam", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.ExamHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompleteTime")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<double>("QuestionRight")
                        .HasColumnType("float");

                    b.Property<double>("ToTalScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("AppExamHistory", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.ExamQuestion", b =>
                {
                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.HasKey("ExamId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AppExamQuestion", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.Grade", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppGrade", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Level", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppLevel", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuesionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("GradeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuesionTypeId");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AppQuestion", (string)null);
                });

            modelBuilder.Entity("QuizExamOnline.Models.QuestionGroup", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppQuestionGroup", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.QuestionType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppQuestionType", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppRole", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppStatus", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Subject", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("AppSubject", "ENUM");
                });

            modelBuilder.Entity("QuizExamOnline.Models.AnswerQuestion", b =>
                {
                    b.HasOne("QuizExamOnline.Models.Question", "Question")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AnswerQuestion_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizExamOnline.Models.AppUserRole", b =>
                {
                    b.HasOne("QuizExamOnline.Models.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("FK_AppUserRole_AppUser");

                    b.HasOne("QuizExamOnline.Models.Role", "Role")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AppUserRole_Role");

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Exam", b =>
                {
                    b.HasOne("QuizExamOnline.Models.AppUser", "AppUser")
                        .WithMany("Exams")
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_AppUser");

                    b.HasOne("QuizExamOnline.Models.Grade", "Grade")
                        .WithMany("Exams")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Grade");

                    b.HasOne("QuizExamOnline.Models.Level", "Level")
                        .WithMany("Exams")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Level");

                    b.HasOne("QuizExamOnline.Models.Status", "Status")
                        .WithMany("Exams")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Status");

                    b.HasOne("QuizExamOnline.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Subject");

                    b.Navigation("AppUser");

                    b.Navigation("Grade");

                    b.Navigation("Level");

                    b.Navigation("Status");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuizExamOnline.Models.ExamHistory", b =>
                {
                    b.HasOne("QuizExamOnline.Models.AppUser", "AppUser")
                        .WithMany("ExamHistories")
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamHistory_AppUser");

                    b.HasOne("QuizExamOnline.Models.Exam", "Exam")
                        .WithMany("ExamHistories")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamHistory_Exam");

                    b.Navigation("AppUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("QuizExamOnline.Models.ExamQuestion", b =>
                {
                    b.HasOne("QuizExamOnline.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestion_Exam");

                    b.HasOne("QuizExamOnline.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamQuestion_Question");

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Question", b =>
                {
                    b.HasOne("QuizExamOnline.Models.AppUser", "AppUser")
                        .WithMany("Questions")
                        .HasForeignKey("AppUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_AppUser");

                    b.HasOne("QuizExamOnline.Models.Grade", "Grade")
                        .WithMany("Questions")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Grade");

                    b.HasOne("QuizExamOnline.Models.Level", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Level");

                    b.HasOne("QuizExamOnline.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuesionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_QuestionType");

                    b.HasOne("QuizExamOnline.Models.QuestionGroup", "QuestionGroup")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_QuestionGroup");

                    b.HasOne("QuizExamOnline.Models.Status", "Status")
                        .WithMany("Questions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Status");

                    b.HasOne("QuizExamOnline.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Subject");

                    b.Navigation("AppUser");

                    b.Navigation("Grade");

                    b.Navigation("Level");

                    b.Navigation("QuestionGroup");

                    b.Navigation("QuestionType");

                    b.Navigation("Status");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("QuizExamOnline.Models.AppUser", b =>
                {
                    b.Navigation("AppUserRoles");

                    b.Navigation("ExamHistories");

                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Exam", b =>
                {
                    b.Navigation("ExamHistories");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Grade", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Level", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Question", b =>
                {
                    b.Navigation("AnswerQuestions");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.QuestionGroup", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Role", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Status", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizExamOnline.Models.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
